set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/autoload/plug.vim
call plug#begin('~/.vim/plugged')
Plug 'vimwiki/vimwiki' 
Plug 'liuchengxu/space-vim-dark'
Plug 'Lokaltog/vim-powerline'
Plug 'vim-airline/vim-airline'
"like popup
Plug 'vim-scripts/AutoComplPop'
Plug 'majutsushi/tagbar',{'on':[]}
" real-time checking
Plug 'dense-analysis/ale' , {'on':[]}
Plug 'liuchengxu/space-vim-theme'
"自动生成ctags并管理
Plug 'ludovicchabant/vim-gutentags' ,{'on':[]}
Plug 'preservim/nerdtree'
"编译运行在quickfix中
Plug 'skywind3000/asyncrun.vim'
"highlight c++ code
Plug 'octol/vim-cpp-enhanced-highlight'
"模糊查找
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"改变提示参数显示方式
Plug 'Shougo/echodoc.vim'
"补全
Plug 'ycm-core/YouCompleteMe',{'on':[]}
"补全括号等
Plug 'Raimondi/delimitMate'
"对齐线
Plug 'Yggdroot/indentLine' 
call plug#end()
" lazy load scripts 
augroup load_cpp
autocmd! load_cpp
autocmd Filetype c,cpp,h,hpp call plug#load('ale') |call plug#load('vim-gutentags')|call plug#load('tagbar')|call plug#load('YouCompleteMe')|autocmd! load_cpp
augroup END
" ./.tags; 代表在文件的所在目录下（不是 “:pwd”返回的 Vim 当前目录）
"查找名字为 .tags”的符号文件，后面一个分号代表查找不到的话向上递归到父目录
set tags=./.tags;,.tags

"---------------------gutentags-----------------------------------------
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
silent! call mkdir(s:vim_tags, 'p')
endif
"---------------------gutentags-----------------------------------------

"------------------------AsyncRun-------------------------------------
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1

" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>

"------------------------AsyncRun-------------------------------------

"-------------------------------ALE----------------------------------
let g:ale_linters = {
\   'cpp': ['gcc'],
\   'c': ['gcc'],
\}
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
"重新定义了警告和错误的样式，去除默认难看的红色背景，
"代码正文使用干净的波浪下划线表示
let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta

"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"-------------------------------ALE----------------------------------

"-----------------------vim-cpp-enhanced-highlight-------------------
"cpp-enhanced-highlight
"高亮类，成员函数，标准库和模板
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
"文件较大时使用下面的设置高亮模板速度较快，但会有一些小错误
"let g:cpp_experimental_template_highlight = 1

"-----------------------vim-cpp-enhanced-highlight-------------------

"------------------------leaderF-----------------------------------

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<cr>
noremap <m-p> :LeaderfFunction!<cr>
noremap <m-n> :LeaderfBuffer<cr>
noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
"----------------------leaderF---------------------------------

"-----------------------------YouCompleteMe--------------------
let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0

let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone

noremap <m-z> <NOP>

let g:ycm_semantic_triggers =  {
\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
\ 'cs,lua,javascript': ['re!\w{2}'],
\ }

"-----------------------------YouCompleteMe--------------------

"----------------------------echodoc---------------------------
let g:echodoc#type = "echo" 
set noshowmode
let g:echodoc_enable_at_startup = 1
"----------------------------echodoc---------------------------
nnoremap <C-a> ggVGY
set laststatus=2
" 使用powerline打过补丁的字体
let g:airline_powerline_fonts = 1
" " 开启tabline
let g:airline#extensions#tabline#enabled = 1
" " tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '
" " tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = ' '
" " tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
"NERDTree 配置:F2快捷键显示当前目录树
map <F2> :NERDTreeToggle<CR>
let NERDTreeWinSize=31 

"g,跳回    g;跳下去    Vexplore 查找目录  C-t 翻译  
"""按Ctrl+h 向左移动一个buffer
nnoremap <C-h> :bp<CR>
"按Ctrl+l 向右移动一个buffer
nnoremap <C-l> :bn<CR>
nnoremap <leader>d :bd<CR
" 设置当文件被改动时自动载入
set autoread
" " quickfix模式
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
" "代码补全 
set completeopt=preview,menu 
" "允许插件  
filetype plugin on
" "共享剪贴板  
set clipboard=unnamed 
" "从不备份  
set nobackup
" "自动保存
set autowrite
set ruler                   " 打开状态栏标尺
set cursorline              " 突出显示当前行
set magic                   " 设置魔术
set guioptions-=T           " 隐藏工具栏
set guioptions-=m           " 隐藏菜单栏
set foldcolumn=0
set foldmethod=indent 
set foldlevel=3 
set foldenable              " 开始折叠
" 不要使用vi的键盘模式，而是vim自己的
set nocompatible
" " 语法高亮
set syntax=on
"
" " 在处理未保存或只读文件的时候，弹出确认
set confirm
" " 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=4
" " 统一缩进为4
set softtabstop=4
set shiftwidth=4
" " 不要用空格代替制表符
set noexpandtab
" " 在行和段开始处使用制表符
set smarttab
set number
" 历史记录数
set history=1000
" "禁止生成临时文件
set nobackup
set noswapfile
" "搜索忽略大小写
set ignorecase
" "搜索逐字符高亮
set hlsearch
set incsearch
" "行内替换
set gdefault
" "编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set fileencoding=utf-8
" "语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn
" 我的状态行显示的内容（包括文件类型和解码）
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\
" %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
" " 总是显示状态行
set laststatus=2
" " 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2
" " 侦测文件类型
filetype on
" " 载入文件类型插件
filetype plugin on
" " 为特定文件类型载入相关缩进文件
filetype indent on
" " 保存全局变量
set viminfo+=!
" " 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" " 字符间插入的像素行数目
set linespace=0
" " 增强模式中的命令行自动完成操作
set wildmenu
" " 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" " 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l
" " 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" " 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" " 高亮显示匹配的括号
set showmatch
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
" " 为C程序提供自动缩进
set smartindent
set foldmethod=marker 
" 去掉输入错误的提示声音
set noeb
"输入一个两个字母开始补全
let g:acp_behaviorKeywordLength = 2
"避免移动产生的自动弹出
let g:AutoComplPop_MappingDriven = 1
syntax enable
set background=dark
"colorscheme 
set term=xterm-256color
colorscheme space-vim-dark
